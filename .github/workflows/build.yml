name: "Build kernels"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "🐂 Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "😄 Checkout"
        uses: actions/checkout@v3

      - name: "😆 Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat  ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "🐎 Build kernel"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: ${{ matrix.repos.kernelSource.name }}_${{ matrix.repos.kernelSource.device }}
      kernelName: ${{ matrix.repos.kernelSource.name }}
      kernelRepo: ${{ matrix.repos.kernelSource.repo }}
      kernelBranch: ${{ matrix.repos.kernelSource.branch }}
      kernelDevice: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: "corfu_defconfig"
      withKernelSU: ${{ matrix.repos.withKernelSU }}
    steps:
      - name: "✨ Create working dir"
        run: mkdir -p $kernelDir

      - name: "⭐ Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu-10 \
            binutils-aarch64-linux-gnu-2.35 \
            build-essential bc curl git zip ftp \
            gcc-arm-linux-gnueabi libssl-dev lftp zstd wget libfl-dev \
            python2 python3 libarchive-tools

      - name: "👍 Set cross compile and architecture"
        run: |
          echo "export CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "export ARCH=arm64" >> $GITHUB_ENV

      - name: "🌟 Clone kernel source => (${{ env.kernelRepo }})"
        working-directory: ./${{ env.kernelDir }}
        run: |
          git clone --recursive --branch $kernelBranch $kernelRepo $kernelName --depth=1

      - name: "😋 Update KernelSU"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ env.withKernelSU == 'true' }}
        run: |
          if [ -d "./ksu" ]; then
            rm -rf "./ksu"
          fi
          curl -LSs "https://github.com/KenshyTp/Ksu/raw/refs/heads/ksu/kernel/setup.sh" | bash -s

          echo -e "\nCONFIG_KPROBES=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          echo -e "\nCONFIG_HAVE_KPROBES=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          echo -e "\nCONFIG_KPROBE_EVENTS=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}

      - name: "👍 Make defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          make ${DEFCONFIG_NAME}

      - name: "🎶 Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          make ${args}

      - name: "💛 Upload Image"
        uses: actions/upload-artifact@v3
        with:
          name: Image(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/arm64/boot/Image
          if-no-files-found: ignore
          retention-days: 7

      - name: "💙 Upload Image.gz"
        uses: actions/upload-artifact@v3
        with:
          name: Image.gz(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/arm64/boot/Image.gz
          if-no-files-found: ignore
          retention-days: 7

      - name: "💜 Upload dtb"
        uses: actions/upload-artifact@v3
        with:
          name: dtb(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/arm64/boot/dtb
          if-no-files-found: ignore
          retention-days: 7

      - name: "❤️ Upload dtbo.img"
        uses: actions/upload-artifact@v3
        with:
          name: dtbo.img(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/arm64/boot/dtbo.img
          if-no-files-found: ignore
          retention-days: 7
